

gradle.allprojects{
    ext.bumpTypes = ["PATCH", "MINOR", "MAJOR"]

    ext.getMajorVersionNumber = {
        return getVersionNumber("MAJOR")
    }
    ext.getMinorVersionNumber = {
        return getVersionNumber("MINOR")
    }
    ext.getPatchVersionNumber = {
        return getVersionNumber("PATCH")
    }
    ext.getBuildNumber = {
        return getVersionNumber("AI_VERSION_CODE")
    }
    ext.getVersionNameString = {
        return "${getMajorVersionNumber()}.${getMinorVersionNumber()}.${getPatchVersionNumber()}"
    }
    ext.bumpTypes.each { bumpType ->
        task ("increment${bumpType.toLowerCase().capitalize()}") << {
            incrementVersion(bumpType)
        }
    }
}
private def getVersionNumber(property){
    Properties props = new Properties()
    props.load(new FileInputStream("app/version.properties"))
    def number = Integer.parseInt(props.getProperty(property))
    if (number == null){
        return 1
    }
    return number
}

task printVersionNumber(){
    print(getVersionNameString())
}
task renameApk(){

    file('build/outputs/apk/app-staging-release.apk').renameTo("app/build/outputs/apk/shakn-${getVersionNameString()}.${getBuildNumber()}.apk")
}
def incrementVersion(bumpType){

    def currentBumpType = bumpType

    Properties props = new Properties()
    props.load(new FileInputStream("app/version.properties"))
    def major = props.getProperty("MAJOR")
    def minor = props.getProperty("MINOR")
    def patch = props.getProperty("PATCH")
    def majorInt = Integer.parseInt(major)
    def minorInt = Integer.parseInt(minor)
    def patchInt = Integer.parseInt(patch)

    switch (currentBumpType) {
        case "MAJOR":
            majorInt = majorInt + 1
            minorInt = 0
            patchInt = 0
            break
        case "MINOR":
            minorInt = minorInt + 1
            patchInt = 0
            break
        case "PATCH":
            patchInt = patchInt + 1
            break
        default: break
    }
    props.setProperty("MAJOR", String.valueOf(majorInt))
    props.setProperty("MINOR", String.valueOf(minorInt))
    props.setProperty("PATCH", String.valueOf(patchInt))
    def writer = new FileWriter(file('version.properties'))
    try {
        props.store(writer, '')
        writer.flush()
    } finally {
        writer.close()
    }


}